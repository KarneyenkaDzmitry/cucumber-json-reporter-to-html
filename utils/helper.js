'use strict';
const fs = require('fs');
const path = require('path');
var _ = require('lodash');
function getReportHeader(reportJson, pathToCss, title, description) {
    return `<!DOCTYPE html><html>
<head>
    <title>cucumber-json-reporter-to-html</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="${pathToCss}" type="text/css"/>
    <meta charset="UTF-8">
</head>
<body>
<header>
<div class="navbar navbar-default navbar-static-top" role="navigation">
<div class="container">
    <div class="navbar-header">
        <a class="navbar-brand">cucumber-json-reporter-to-html</a>
        <div class="project-name visible-md visible-lg">${title}</div>
        <div class="label-container">
            <span class="label label-success" title=scenarios>Passed: ${getResult(reportJson, 'passed')}</span>
            <span class="label label-danger" title=scenarios>Failed: ${getResult(reportJson, 'failed')}</span>
            <span class="label label-warning" title=scenarios>Skipped: ${getResult(reportJson, 'skipped')}</span>
        </div>
    </div>
</div>
</div>
    </header>
<div class="body-results-wrapper">
<div class="container">${description === undefined ? '' : description}</div>
<div class="header-container">
    <div class="container">
        <!-- <h2>Features:</h2> -->
        <ul class="nav nav-tabs">
            <li class="active"><a href="#all">All</a></li>
            <li><a href="#passed">Passed</a></li>
            <li><a href="#failed">Failed</a></li>
        </ul>
        <div class="tab-content">`;
}

const reportEnd = `</div>
</div> <script>
$(document).ready(function () {
    $(".nav-tabs a").click(function () {
        $(this).tab('show');
    });
});
</script>
</div>
</div>
<div> &nbsp;<br> &nbsp; </div>
<div class="navbar-fixed-bottom row-fluid footer-div">
<div class="navbar-inner ">
<div class="footer date">generated time: ${new Date().getDate} </div>
<div class="footer-container">
<a target="_blank" href="https://www.npmjs.com/package/cucumber-json-reporter-to-html">
    <div class="text-muted footer-link">
        generated by @cucumber-json-reporter-to-html
    </div>
</a>
</div>
</div>
</div>
</body>
</html>`;

function getResult(reportJson, status) {
    let result = 0;
    reportJson.forEach((feature) => {
        feature.elements.forEach((scenario) => {
            scenario.steps.forEach((step) => {
                if (step.result.status === status) { result++; }
            });
        });
    });
    return result;
}

var calculateDuration = function (duration) {
    var oneNanoSecond = 1000000000;
    var oneMinute = 60 * oneNanoSecond;
    duration = parseInt(duration);
    function format(min, sec) {
        sec = sec + 's';
        return min > 0 ? min + 'm ' + sec : sec;
    }
    if (!isNaN(duration)) {
        var min = _.floor(duration / oneMinute);
        var sec = _.round((duration % oneMinute) / oneNanoSecond);
        return format(min, sec);
    }
};

function getStepColor(step) {
    let cssClass;
    switch (step.result.status) {
        case 'passed':
            cssClass = 'label-success';
            break;
        case 'failed':
            cssClass = 'label-danger';
            break;
        case 'skipped':
            cssClass = 'label-skipped';
            break;
    }
    return cssClass;
}

function getScenarioTime(steps) {
    let result = 0;
    steps.forEach((step) => {
        if (step.result.status !== 'skipped' && step.keyword !== 'After') {
            result += step.result.duration;
        }
    });
    return calculateDuration(result);
}

function generateScenarioHtml(scenarioArray, reportStoreHtml, appender) {
    let scenarioHtml = '';
    let scenarioIndex = 0;
    scenarioArray.forEach((scenario) => {
        const status = getScenarioStatus(scenario.steps);
        scenarioHtml = scenarioHtml + `
        <div class="panel-body scenario ${status}">
        <div class="panel-group" style="margin: 0;padding: 0;">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title ${status}">
                    <a data-toggle="collapse" href="#scenario${appender}${scenarioIndex}">
                    <div class="row" style="padding: 2px 2px 0px 0px">
                        <div class="col-sm-10"><strong>Scenario:
                            </strong>${scenario.name}</div>
                            <div class="col-sm-2" style="text-align:right;">${getScenarioTime(scenario.steps)}</div>
                        </div>
                    </a>
                </h4>
            </div>
            <div id="scenario${appender}${scenarioIndex}" class="panel-collapse collapse">
            <ul class="list-group">${generateStepsHtml(scenario.steps, scenario.name, reportStoreHtml)}`
        // `">
        // <div>
        //     <strong>Scenario: </strong>${scenario.name}
        //     <div style="text-align:right;">${getScenarioTime(scenario.steps)} ms</div>
        // ${generateStepsHtml(scenario.steps, scenario.name, reportStoreHtml)}</div></div>`;
    });
    return scenarioHtml+`</ul>
    <!-- <div class="panel-footer">Panel Footer</div> -->
</div>`;
}

function generateStepsHtml(stepsArray, scenarioName, reportStoreHtml) {

    let stepsHtml = '';
    stepsArray.forEach((step) => {
        if (step.keyword !== 'After') {
            stepsHtml = stepsHtml + `<li class="list-group-item steps ${getStepColor(step)}">
            <div class="row" style="padding: 2px 2px 0px 0px">
                <div class="col-sm-10"><strong>${step.keyword} </strong>${step.name}</div>
                <div class="col-sm-2" style="text-align:right;">${step.result.duration !== undefined ? calculateDuration(step.result.duration) : 'skipped'} </div>
                </div>
            </li>`
        }
        else {
            if (step.embeddings !== undefined) {
                let image = new Buffer.from(step.embeddings[0].data, 'base64');
                fs.existsSync(path.dirname(reportStoreHtml)+'/screenshots') || fs.mkdirSync(path.dirname(reportStoreHtml)+'/screenshots');
                let screenshotPath = path.dirname(reportStoreHtml)+'/screenshots/' + scenarioName.replace(/\s/g, '') + '.png';
                fs.writeFileSync(screenshotPath, image, 'base64');
                stepsHtml = stepsHtml + `<img src='${path.relative(path.dirname(reportStoreHtml), screenshotPath)}'>`;
            }
        }
    });
    return stepsHtml;
}

function generateHtmlForFeature(jsonData, reportStoreHtml) {
    const body = {
        all: { result: '<div id="all" class="tab-pane fade in active">', end: "</div>", appender: "All" },
        passed: { result: '<div id="passed" class="tab-pane fade">', end: "</div>", appender: "Pass" },
        failed: { result: '<div id="failed" class="tab-pane fade">', end: "</div>", appender: "Fail" }
    }
    let reportFillingHtml = ` <div class="panel-group" style="margin: 0;padding: 0;">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title `;
    let featureIndex = 0;
    jsonData.forEach((feature) => {
        reportFillingHtml += `${getFeatureStatus(feature.elements)}">
        <a data-toggle="collapse" href="#feature${body.all.appender}${featureIndex}">
        <div class="row" style="padding: 2px 2px 0px 0px">
            <div class="col-sm-10"><strong>Feature: </strong>${feature.name}</div>
            <div class="col-sm-2" style="text-align:right;">Not implemented method for time</div>
        </div>
    </a>
</h4>
</div>
<div id="feature${body.all.appender}${featureIndex}" class="panel-collapse collapse">${generateScenarioHtml(feature.elements, reportStoreHtml, body.all.appender)}`
        // reportFillingHtml = reportFillingHtml + `<div class="container">
        // <h3 class="all-features ${getFeatureStatus(feature.elements)}"><strong>Feature: </strong>${feature.name}</h3>
        // <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#feature${featureIndex}">more details</button>
        // <div id="feature${featureIndex}" class="collapse">${generateScenarioHtml(feature.elements, reportStoreHtml)}</div></div></div>`
        featureIndex++;
    });
    return reportFillingHtml+`</div>
    </div>
</div>
<!-- <div class="panel-footer">Panel Footer</div> -->
</div>
</div>
</div>`;
}

function getFeatureStatus(elements) {
    elements = elements.filter((element) => {
        if (getScenarioStatus(element.steps) === 'label-failed') { return element; }
    });
    return elements.length > 0 ? 'label-failed' : 'label-passed';
}

function getScenarioStatus(steps) {
    steps = steps.filter((step) => {
        if (step.result.status === 'failed') return step;
    });
    return steps.length > 0 ? 'label-failed' : 'label-passed';
}

function createReport(pathToReport, reportStoreHtml, title, description) {
    const reportJson = JSON.parse(fs.readFileSync(pathToReport));
    const pathToCss = getPathToCss(reportStoreHtml);
    let finalHtml = getReportHeader(reportJson, pathToCss, title, description) + generateHtmlForFeature(reportJson, reportStoreHtml) + reportEnd;
    fs.writeFileSync(reportStoreHtml, finalHtml.toString(), 'utf8');
}

function getPathToCss(reportStoreHtml) {
    return path.relative(path.dirname(reportStoreHtml), './css/custom.css');
}
/**
 * 
 */

function getResults(reportJson) {
    const statistics = {};
    const statuses = ['passed', 'failed', 'skipped'];
    statuses.forEach(status => {
        let result = 0;
        reportJson.forEach((feature) => {
            feature.elements.forEach((scenario) => {
                scenario.steps.forEach((step) => {
                    if (step.result.status === status) { result++; }
                });
            });
        }); 
        statistics[status] = result;
    });
    return statistics;
}

function getFeaturesLists(reportJson) {
    
}
module.exports = { createReport, getResults, getFeaturesLists }
